[
{
  "title": "Two Sum",
  "author": "Vishal Choudhari",
  "description": "Given an array of integers, return indices of two numbers such that they adds up to specific target",
  "createdAt": {
    "seconds": 1592416338289,
    "nanoseconds": 0
  },
  "orderBy": 1,
  "tags": {
    "Array": "Data Structures And Algorithms",
    "Hash Table": "Data Structures And Algorithms",
    "Google": "Company",
    "Easy": "Difficulty",
    "Microsoft": "Company",
    "Amazon": "Company",
    "Leetcode": "Website",
    "Facebook": "Company"
  },
  "category": "Data Structures And Algorithms",
  "content": "\nimport java.util.*;\n \nclass L1 {\n    public int[] twoSum(int[] arr, int target) {\n        HashMap\u003cInteger, Integer\u003e map \u003d new HashMap\u003c\u003e();\n        /**\n         *  Algorithm:\n         *  1. Create a HashMap to hold an element and it\u0027s corresponding index\n         *  2. Iterate over an input array and\n         *      2.1. Check if we have an element in HashMap which is equal to target - current array element\n         *      2.2. If we find such element in HashMap return it\u0027s index and current element\u0027s index as an answer\n         *      2.3. Else add current array element and it\u0027s corresponding index into HashMap\n         *      2.4 Continue until all the elements in an array are iterated\n         **/\n        for(int i \u003d 0; i \u003c arr.length; i++) {\n            if(map.containsKey(target - arr[i])) return new int[] {map.get(target - arr[i]), i};\n            map.put(arr[i], i);\n        }\n        return new int[] {-1, -1};\n    }\n}",
  "suggestions": [
    "3Sum",
    "4Sum",
    "Two Sum II - Input array is sorted",
    "Two Sum III - Data structure design",
    "Subarray Sum Equals K",
    "Two Sum IV - Input is a BST",
    "Two Sum Less Than K"
  ],
  "saved": true
}
]